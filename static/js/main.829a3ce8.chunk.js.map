{"version":3,"sources":["components/LightOut/index.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","LightOut","React","randomArray","Array","fill","dispatch","randomActive","array","activeCounter","finalArray","map","item","index","innerItem","id","Math","floor","random","isActivated","newArr","tempArr","i","row","col","className","indx","onClick","filter","length","window","alert","changeActiveStates","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6eAGA,SAASA,EAAQC,EAAOC,GACtB,O,yWAAO,CAAP,GAAYD,EAAZ,GAAsBC,GAExB,IAyGeC,EAzGE,WACf,IADqB,EAIKC,aAAiBJ,EAHf,CAC1BK,YAAaC,MAAM,GAAGC,KAAK,MAFR,mBAIdN,EAJc,KAIPO,EAJO,KAuBrB,SAASC,EAAaC,GACpB,IACIC,EAAgB,EACdC,EAFUF,EAEWG,KAAI,SAACC,EAAMC,GACpC,OAAOD,EAAKD,KAAI,SAACG,EAAWD,GAC1B,OAAIC,EAAUC,KAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,IACnDJ,EAAUK,aAAc,EACxBV,GAAiB,EACVK,GAEFA,QAOX,OAJsB,IAAlBL,IACFC,EAAW,GAAG,GAAGS,aAAc,GAG1BT,EA6BT,OA/DAR,aAAgB,WACd,IAAMkB,EAASrB,EAAMI,YAAYQ,KAAI,SAACC,EAAMC,GAE1C,IADA,IAAMQ,EAAU,GACPC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAQC,GAAK,CACXC,IAAKV,EACLW,IAAKF,EACLH,aAAa,EACbJ,GAAY,EAARF,EAAYS,EAAI,GAGxB,OAAOD,KAETf,EAAS,CAAEH,YAAaI,EAAaa,OAEpC,IAiDD,uBAAKK,UAAU,YACb,+CACA,8FAEE,2BAFF,yEAIE,2BAJF,wEAOA,uBAAKA,UAAU,WACb,uBAAKA,UAAU,iBACZ1B,EAAMI,YAAYQ,KAAI,SAACC,EAAMC,GAC5B,OACE,2BACGD,EAAKD,KAAI,SAACG,EAAWY,GACpB,OACE,wBACEC,QAAS,kBA5C7B,SAA4BJ,EAAKC,EAAKX,GACpC,IAAMQ,EAAUtB,EAAMI,YACtBkB,EAAQE,GAAKC,GAAKL,aAAeE,EAAQE,GAAKC,GAAKL,YAC/CK,EAAM,EAAI,IACZH,EAAQE,GAAKC,EAAM,GAAGL,aAAeE,EAAQE,GAAKC,EAAM,GAAGL,aAEzDK,EAAM,GAAK,IACbH,EAAQE,GAAKC,EAAM,GAAGL,aAAeE,EAAQE,GAAKC,EAAM,GAAGL,aAEzDI,EAAM,GAAK,IACbF,EAAQE,EAAM,GAAGC,GAAKL,aAAeE,EAAQE,EAAM,GAAGC,GAAKL,aAEzDI,EAAM,EAAI,IACZF,EAAQE,EAAM,GAAGC,GAAKL,aAAeE,EAAQE,EAAM,GAAGC,GAAKL,aAG7Db,EAAS,CAAEH,YAAakB,IAMA,IAJPA,EAAQO,QACvB,SAAAhB,GAAI,OAA+D,IAA3DA,EAAKgB,QAAO,SAAAd,GAAS,OAAIA,EAAUK,eAAaU,UAG7CA,QACXC,OAAOC,MAAM,OAsBKC,CAAmBlB,EAAUS,IAAKT,EAAUU,MAE9CC,UAAS,yBACPX,EAAUK,YAAc,SAAW,iBCrF5Cc,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.829a3ce8.chunk.js","sourcesContent":["import * as React from \"react\";\r\n// styles\r\nimport \"./index.scss\";\r\nfunction reducer(state, action) {\r\n  return { ...state, ...action };\r\n}\r\nconst LightOut = () => {\r\n  const initialState = () => ({\r\n    randomArray: Array(5).fill([])\r\n  });\r\n  const [state, dispatch] = React.useReducer(reducer, initialState());\r\n\r\n  React.useEffect(() => {\r\n    const newArr = state.randomArray.map((item, index) => {\r\n      const tempArr = [];\r\n      for (let i = 0; i < 5; i++) {\r\n        tempArr[i] = {\r\n          row: index,\r\n          col: i,\r\n          isActivated: false,\r\n          id: index * 5 + i + 1\r\n        };\r\n      }\r\n      return tempArr;\r\n    });\r\n    dispatch({ randomArray: randomActive(newArr) });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  function randomActive(array) {\r\n    const tempArr = array;\r\n    let activeCounter = 0;\r\n    const finalArray = tempArr.map((item, index) => {\r\n      return item.map((innerItem, index) => {\r\n        if (innerItem.id === Math.floor(Math.random() * 25 + 1)) {\r\n          innerItem.isActivated = true;\r\n          activeCounter += 1;\r\n          return innerItem;\r\n        }\r\n        return innerItem;\r\n      });\r\n    });\r\n    if (activeCounter === 0) {\r\n      finalArray[0][0].isActivated = true;\r\n    }\r\n\r\n    return finalArray;\r\n  }\r\n\r\n  function changeActiveStates(row, col, index) {\r\n    const tempArr = state.randomArray;\r\n    tempArr[row][col].isActivated = !tempArr[row][col].isActivated;\r\n    if (col + 1 < 5) {\r\n      tempArr[row][col + 1].isActivated = !tempArr[row][col + 1].isActivated;\r\n    }\r\n    if (col - 1 >= 0) {\r\n      tempArr[row][col - 1].isActivated = !tempArr[row][col - 1].isActivated;\r\n    }\r\n    if (row - 1 >= 0) {\r\n      tempArr[row - 1][col].isActivated = !tempArr[row - 1][col].isActivated;\r\n    }\r\n    if (row + 1 < 5) {\r\n      tempArr[row + 1][col].isActivated = !tempArr[row + 1][col].isActivated;\r\n    }\r\n\r\n    dispatch({ randomArray: tempArr });\r\n\r\n    const checkArr = tempArr.filter(\r\n      item => item.filter(innerItem => innerItem.isActivated).length !== 0\r\n    );\r\n\r\n    if (checkArr.length === 0) {\r\n      window.alert(\"won\");\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"lightOut\">\r\n      <h3>The lightOut game</h3>\r\n      <p>\r\n        the purpose of the game is to turn off all the lights on the board\r\n        <br />\r\n        clicking on a square switches its lightning state clicking on a square\r\n        <br />\r\n        also switches the state of its North, South, East and West neighbors\r\n      </p>\r\n      <div className=\"wrapper\">\r\n        <div className=\"inner-wrapper\">\r\n          {state.randomArray.map((item, index) => {\r\n            return (\r\n              <div>\r\n                {item.map((innerItem, indx) => {\r\n                  return (\r\n                    <span\r\n                      onClick={() =>\r\n                        changeActiveStates(innerItem.row, innerItem.col, indx)\r\n                      }\r\n                      className={`lightOut__item ${\r\n                        innerItem.isActivated ? \"active\" : \"\"\r\n                      }`}\r\n                    ></span>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LightOut;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport LightOut from \"./components/LightOut\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <LightOut />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}